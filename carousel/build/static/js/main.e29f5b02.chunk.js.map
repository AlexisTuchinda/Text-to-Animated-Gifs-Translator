{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","isFocused","currentCaption","index","render","theme","props","primaryColor","Carousel","activeIndex","onSelect","selectedIndex","e","setState","slide","interval","style","width","height","args","map","url","Item","className","src","alt","Caption","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"sSAmBMA,EAAW,iKAmDd,OAnDc,oCACRC,MAAQ,CAAEC,WAAW,EAAOC,eAAgB,GAAIC,MAAO,GAAI,EAC3DC,OAAS,WAKd,IAAQC,EAAU,EAAKC,MAAfD,MAIR,GAAIA,EAGiB,oBACjB,EAAKL,MAAMC,UAAYI,EAAME,aAAe,QAQhD,OACE,6BACE,kBAACC,EAAA,EAAQ,CACPC,YAAa,EAAKT,MAAMG,MACxBO,SAPe,SAACC,EAAuBC,GAC3C,EAAKC,SAAS,CAACV,MAAOQ,KAOlBG,OAAO,EAEPC,SAAU,KACVC,MAAO,CAACC,MAAM,OAAQC,OAAO,UAE5B,EAAKZ,MAAMa,KAAW,KAAEC,KAAI,SAACC,EAAalB,GACzC,OACE,kBAACK,EAAA,EAASc,KAAI,KACZ,yBACEC,UAAU,sBACVC,IAAKH,EACLI,IAAK,mBACLT,MAAO,CAACC,MAAM,OAAQC,OAAO,UAE/B,kBAACV,EAAA,EAASkB,QAAO,CAACH,UAAU,WAC1B,4BAAK,EAAKjB,MAAMa,KAAc,QAAEhB,YAQ/C,wBAnDc,CAASwB,KA2DXC,cAAwB7B,G,MCzEvC8B,IAASzB,OACP,kBAAC,IAAM0B,WAAU,KACf,kBAAC,EAAW,OAEdC,SAASC,eAAe,W","file":"static/js/main.e29f5b02.chunk.js","sourcesContent":["\nimport \"./MyComponent.css\";\nimport {\n  // Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\";\nimport Carousel from 'react-bootstrap/Carousel';\ninterface State {\n  isFocused: boolean,\n  currentCaption: string,\n  index: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, currentCaption: \"\", index: 0 };\n  public render = (): ReactNode => {\n// THE BELOW LINES ARE FROM THE TEMPLATE COMPONENT BUT NICE FOR COMPATIBILITY\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.outline = borderStyling\n    }\n// END ABOVE STATEMENT\n    const handleSelect = (selectedIndex: number, e: any) => {\n      this.setState({index: selectedIndex});\n    };\n    return (\n      <div>\n        <Carousel \n          activeIndex={this.state.index}\n          onSelect={handleSelect}\n          slide={false}\n          // variant=\"dark\"\n          interval={null}\n          style={{width:\"auto\", height:\"800px\"}}\n        >\n          {this.props.args[\"urls\"].map((url: string, index: number) => {\n            return (\n              <Carousel.Item>\n                <img\n                  className=\"d-block w-100 h-100\"\n                  src={url}\n                  alt={\"carousel element\"}\n                  style={{width:\"auto\", height:\"auto\"}}\n                />\n                <Carousel.Caption className=\"caption\">\n                  <h4>{this.props.args[\"prompts\"][index]}</h4>\n                </Carousel.Caption>\n              </Carousel.Item>\n            )\n          })}\n        </Carousel>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}